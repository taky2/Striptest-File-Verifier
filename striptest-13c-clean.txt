public class CreateCoffeeDB
{
   public CreateCoffeeDB()
   {
      try
      {
         final String DB_URL = "jdbc:derby:CoffeeDB;create=true";
         Connection conn = DriverManager.getConnection(DB_URL);
         dropTables(conn);
         buildCoffeeTable(conn);
         buildCustomerTable(conn);
         buildUnpaidOrderTable(conn);
         viewTables(conn);
         conn.close();
      } catch (Exception e)
      {
         System.out.println("Error Creating the Coffee Table");
         System.out.println(e.getMessage());
      }
   }
   public static void dropTables(Connection conn)
   {
      System.out.println("Checking for existing tables.");
      try
      {
         Statement stmt = conn.createStatement();
         try
         {
            stmt.execute("DROP TABLE Unpaidorder");
            System.out.println("UnpaidOrder table dropped.");
         } catch (SQLException ex)
         {
         }
         try
         {
            stmt.execute("DROP TABLE Customer");
            System.out.println("Customer table dropped.");
         } catch (SQLException ex)
         {
         }
         try
         {
            stmt.execute("DROP TABLE Coffee");
            System.out.println("Coffee table dropped.");
         } catch (SQLException ex)
         {
         }
      } catch (SQLException ex)
      {
         System.out.println("ERROR: " + ex.getMessage());
         ex.printStackTrace();
      }
   }
   public static void buildCoffeeTable(Connection conn)
   {
      try
      {
         Statement stmt = conn.createStatement();
         stmt.execute("CREATE TABLE Coffee (" +
            "Description CHAR(25), " +
            "ProdNum CHAR(10) NOT NULL PRIMARY KEY, " +
            "Price DOUBLE " +
            ")");
         stmt.execute("INSERT INTO Coffee VALUES ( " +
            "'Bolivian Dark', " +
            "'14-001', " +
            "8.95 )");
         stmt.execute("INSERT INTO Coffee VALUES ( " +
            "'Bolivian Medium', " +
            "'14-002', " +
            "8.95 )");
         stmt.execute("INSERT INTO Coffee VALUES ( " +
            "'Brazilian Dark', " +
            "'15-001', " +
            "7.95 )");
         stmt.execute("INSERT INTO Coffee VALUES ( " +
            "'Brazilian Medium', " +
            "'15-002', " +
            "7.95 )");
         stmt.execute("INSERT INTO Coffee VALUES ( " +
            "'Brazilian Decaf', " +
            "'15-003', " +
            "8.55 )");
         stmt.execute("INSERT INTO Coffee VALUES ( " +
            "'Central American Dark', " +
            "'16-001', " +
            "9.95 )");
         stmt.execute("INSERT INTO Coffee VALUES ( " +
            "'Central American Medium', " +
            "'16-002', " +
            "9.95 )");
         stmt.execute("INSERT INTO Coffee VALUES ( " +
            "'Sumatra Dark', " +
            "'17-001', " +
            "7.95 )");
         stmt.execute("INSERT INTO Coffee VALUES ( " +
            "'Sumatra Decaf', " +
            "'17-002', " +
            "8.95 )");
         stmt.execute("INSERT INTO Coffee VALUES ( " +
            "'Sumatra Medium', " +
            "'17-003', " +
            "7.95 )");
         stmt.execute("INSERT INTO Coffee VALUES ( " +
            "'Sumatra Organic Dark', " +
            "'17-004', " +
            "11.95 )");
         stmt.execute("INSERT INTO Coffee VALUES ( " +
            "'Kona Medium', " +
            "'18-001', " +
            "18.45 )");
         stmt.execute("INSERT INTO Coffee VALUES ( " +
            "'Kona Dark', " +
            "'18-002', " +
            "18.45 )");
         stmt.execute("INSERT INTO Coffee VALUES ( " +
            "'French Roast Dark', " +
            "'19-001', " +
            "9.65 )");
         stmt.execute("INSERT INTO Coffee VALUES ( " +
            "'Galapagos Medium', " +
            "'20-001', " +
            "6.85 )");
         stmt.execute("INSERT INTO Coffee VALUES ( " +
            "'Guatemalan Dark', " +
            "'21-001', " +
            "9.95 )");
         stmt.execute("INSERT INTO Coffee VALUES ( " +
            "'Guatemalan Decaf', " +
            "'21-002', " +
            "10.45 )");
         stmt.execute("INSERT INTO Coffee VALUES ( " +
            "'Guatemalan Medium', " +
            "'21-003', " +
            "9.95 )");
         System.out.println("Coffee table created.");
      } catch (SQLException ex)
      {
         System.out.println("ERROR: " + ex.getMessage());
      }
   }
   public static void buildCustomerTable(Connection conn)
   {
      try
      {
         Statement stmt = conn.createStatement();
         stmt.execute("CREATE TABLE Customer" +
            "( CustomerNumber CHAR(10) NOT NULL PRIMARY KEY, " +
            "  Name CHAR(25)," +
            "  Address CHAR(25)," +
            "  City CHAR(12)," +
            "  State CHAR(2)," +
            "  Zip CHAR(5) )");
         stmt.executeUpdate("INSERT INTO Customer VALUES" +
            "('101', 'Downtown Cafe', '17 N. Main Street'," +
            " 'Asheville', 'NC', '55515')");
         stmt.executeUpdate("INSERT INTO Customer VALUES" +
            "('102', 'Main Street Grocery'," +
            " '110 E. Main Street'," +
            " 'Canton', 'NC', '55555')");
         stmt.executeUpdate("INSERT INTO Customer VALUES" +
            "('103', 'The Coffee Place', '101 Center Plaza'," +
            " 'Waynesville', 'NC', '55516')");
         System.out.println("Customer table created.");
      } catch (SQLException ex)
      {
         System.out.println("ERROR: " + ex.getMessage());
      }
   }
   public static void buildUnpaidOrderTable(Connection conn)
   {
      try
      {
         Statement stmt = conn.createStatement();
         stmt.execute("CREATE TABLE UnpaidOrder " +
                 "( CustomerNumber CHAR(10) NOT NULL REFERENCES Customer(CustomerNumber), " +
                 "  ProdNum CHAR(10) NOT NULL REFERENCES Coffee(ProdNum)," +
                 "  OrderDate CHAR(10)," +
                 "  Quantity DOUBLE," +
                 "  Cost DOUBLE )");
         System.out.println("UnpaidOrder table created.");
      } catch (SQLException ex)
      {
         System.out.println("ERROR: " + ex.getMessage());
      }
   }
   public static void viewTables(Connection conn) {
       System.out.println("Checking for existing tables.");
       try
       {
           Statement stmt = conn.createStatement();
           try
           {
               ResultSet resultSet = stmt.executeQuery(
                       "SELECT * FROM Customer");
               System.out.println("\nPrinting customer table...");
               while (resultSet.next()) {
                   System.out.println(
                             " " + resultSet.getString("CustomerNumber")
                           + " " + resultSet.getString("Name")
                           + " " + resultSet.getString("Address")
                           + " " + resultSet.getString("City")
                           + " " + resultSet.getString("State")
                           + " " + resultSet.getString("Zip")
                   );
               }
               System.out.println("Done printing customer table.");
           } catch (SQLException ex)
           {
               System.err.println("Exception: " + ex.getMessage());
           }
           try
           {
               ResultSet resultSet = stmt.executeQuery(
                       "SELECT * FROM Coffee");
               System.out.println("\nPrinting coffee table...");
               while (resultSet.next()) {
                   System.out.println(
                             " " + resultSet.getString("Description")
                           + " " + resultSet.getString("ProdNum")
                           + " " + resultSet.getDouble("Price")
                   );
               }
               System.out.println("Done printing coffee table.");
           } catch (SQLException ex)
           {
               System.err.println("Exception: " + ex.getMessage());
           }
           try
           {
               ResultSet resultSet = stmt.executeQuery(
                       "SELECT * FROM UnpaidOrder");
               System.out.println("\nPrinting unpaid orders...");
               while (resultSet.next()) {
                   System.out.println(
                             " " + resultSet.getString("CustomerNumber")
                           + " " + resultSet.getString("ProdNum")
                           + " " + resultSet.getString("OrderDate")
                           + " " + resultSet.getDouble("Quantity")
                           + " " + resultSet.getDouble("Cost")
                   );
               }
               System.out.println("Done printing unpaid orders table.");
           } catch (SQLException ex)
           {
               System.err.println("Exception: " + ex.getMessage());
           }
       } catch (SQLException ex)
       {
           System.out.println("ERROR: " + ex.getMessage());
           ex.printStackTrace();
       }
   }
}
